name: Build & Release Installers

on:
  push:
    tags:
      - '*'

jobs:
  build-installers:
    name: Build on ${{ matrix.os }} (${{ runner.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: windows-latest-arm64
          - os: macos-latest
          - os: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: ${{ runner.arch }}

      - name: Clone Maven Dependency
        uses: actions/checkout@v4
        with:
          repository: Kakifrucht/yetanotherhueapi
          path: yetanotherhueapi_repo

      - name: Install Maven Dependency
        working-directory: yetanotherhueapi_repo
        shell: bash
        run: |
          echo "Building and installing dependency to Maven Local..."
          mvn install
          echo "Dependency installed successfully."

      - name: Make gradlew executable
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      # --- Build Native Installers ---
      - name: Build Native Installer (MSI, DEB, DMG)
        # This step runs for all jobs EXCEPT Windows ARM64
        if: runner.os != 'Windows' || runner.arch != 'ARM64'
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./gradlew.bat jpackage
          else
            ./gradlew jpackage
          fi
        shell: bash

      - name: Build Windows App Image
        if: runner.os == 'Windows'
        run: .\gradlew.bat jpackage -Pwindows-appimage

      # --- Platform-Agnostic ZIP Bundle ---
      - name: Bundle JAR and Launch Script into ZIP
        if: runner.os == 'Linux'
        run: ./gradlew bundleReleaseZip

      # --- Artifact Upload Steps ---
      - name: Upload MSI Installer Artifact
        if: runner.os == 'Windows' && runner.arch == 'X64'
        uses: actions/upload-artifact@v4
        with:
          name: LightBeat-${{ github.ref_name }}-Windows-MSI
          path: 'build/jpackage/*.msi'

      - name: Archive and Upload Windows App Image Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: LightBeat-${{ github.ref_name }}-Windows-AppImage-${{ runner.arch }}
          path: 'build/jpackage/LightBeat/'

      - name: Upload DEB Installer Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: LightBeat-${{ github.ref_name }}-Linux-DEB
          path: 'build/jpackage/*.deb'

      - name: Upload DMG Installer Artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: LightBeat-${{ github.ref_name }}-macOS-DMG
          path: 'build/jpackage/*.dmg'

      - name: Upload ZIP Bundle Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: LightBeat-${{ github.ref_name }}-All
          path: 'build/distributions/LightBeat-*.zip'

  create-release:
    name: Create GitHub Release
    needs: build-installers
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: installers/

      - name: Display downloaded files structure
        run: ls -R installers/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            installers/LightBeat-${{ github.ref_name }}-Windows-MSI/*
            installers/LightBeat-${{ github.ref_name }}-Linux-DEB/*
            installers/LightBeat-${{ github.ref_name }}-macOS-DMG/*
            installers/LightBeat-${{ github.ref_name }}-All/*